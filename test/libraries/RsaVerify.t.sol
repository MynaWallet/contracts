// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.19;

import "forge-std/Test.sol";
import "@libraries/RsaVerify.sol";

contract TestRsaVerify is Test {
    using SolRsaVerify for bytes32;

    bytes32 internal constant DIGEST = hex"8350ef0cdbc7e5731e6a5a1eba9a25deaff11133fc74df5bc16f68a026410aa2";
    bytes32 internal constant SHA256_HASHED = hex"a7b437b954aec5b28791525a83e0a43fe52c4212b52dd8af155d83a286347f13";
    bytes internal constant EXPONENT =
        hex"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001";
    bytes internal constant SIGNATURE =
        hex"2f3e75ef281ab26ede549adb90efc875f1eb6fbfad47fa3e7d84b9e1d67a536672fdb9b3e7ec2b9a0ed50ffe1825e90aa289ba596f1f0196db82f34bea7e9d1afc79fd631a5e354b3bb845a6bbb8a3418d738ad0f2211313903476afea8438a63a3049444da44d97b3f0064c8d33a21b765327a37cef2f42788619a37eebf7e8919524b55b0dc2c78b89a1f680a00ce8762ce61f4054514640ad5221a9e5961e44499dc00d98d57c66e4a5276e4a44adae4f1da8200410a0fe237fd85c7bfe4c7f122bb01cfa9f2409c5fad9cc8de22b3720d856afdae8f7eb8c9cb3b2f16be1bb45ae21b844a11837d00ba48962862332b3e49dc00a132772892eceb2ad1b90";
    bytes internal constant MODULUS =
        hex"8f6047064f400fd2ff80ad6569c2cffc238079e2cb18648305a59b9f1f389730f9bf9b5e3e436f88065c06241c7189ba43b6adbe5ec7a979d4b42f2a450cd19e8075e5a817b04328a0d16ebfcb6bc09a96020217af6218f3765dbc129131edd004472ab45908bf02ec35b7c044e1c900f7df179fc19c94835802e58c432bc73cee54148a6f24d7316cca195791c87e07e85b07f80b71ddc15b9b053e6f0265a8e81c27c7546dea38cbb951ca71c384892b81df12c8cb0444f9e04d24d0d3323fa857075be26746f4b731a186a51cec24151597b9d31c9ef78db83f27ef0d973d4d2a2d8a9093c7118bf86322603a17d7814a05f6150963b72a275f645a099319";

    function testSuccessRsaVerify() public {
        uint256 ret = SHA256_HASHED.pkcs1Sha256Verify(SIGNATURE, EXPONENT, MODULUS);
        assertTrue(ret == 0, "pkcs1Sha256Verify failed");
    }

    function testFailRsaVerify() public {
        bytes32 INVALID_SHA256_HASHED = hex"47707cfb91cc6bede5f48cde4f1cea391e0ed78338e9240889b045e8808b32d3";
        uint256 ret = INVALID_SHA256_HASHED.pkcs1Sha256Verify(SIGNATURE, EXPONENT, MODULUS);
        assertTrue(ret == 1, "pkcs1Sha256Verify failed");
    }
}
